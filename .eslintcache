[{"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\App.js":"1","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\index.js":"2","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\Teams.jsx":"3","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\MyTeams.jsx":"4","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Top5.jsx":"5","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\router\\Router.jsx":"6","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Header.jsx":"7","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\RatePicker.jsx":"8","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Footer.jsx":"9","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\CreateTeam.jsx":"10","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Content.jsx":"11","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Card.jsx":"12","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\EditTeam.jsx":"13","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\LogIn.jsx":"14","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\Register.jsx":"15"},{"size":253,"mtime":1606609836662,"results":"16","hashOfConfig":"17"},{"size":222,"mtime":1606588172557,"results":"18","hashOfConfig":"17"},{"size":713,"mtime":1606609920970,"results":"19","hashOfConfig":"17"},{"size":8100,"mtime":1606956722209,"results":"20","hashOfConfig":"17"},{"size":4615,"mtime":1607023577039,"results":"21","hashOfConfig":"17"},{"size":859,"mtime":1606958226475,"results":"22","hashOfConfig":"17"},{"size":2047,"mtime":1606693005492,"results":"23","hashOfConfig":"17"},{"size":4749,"mtime":1607024669727,"results":"24","hashOfConfig":"17"},{"size":528,"mtime":1606609806102,"results":"25","hashOfConfig":"17"},{"size":22006,"mtime":1607025764713,"results":"26","hashOfConfig":"17"},{"size":540,"mtime":1607023850131,"results":"27","hashOfConfig":"17"},{"size":503,"mtime":1607023774647,"results":"28","hashOfConfig":"17"},{"size":21226,"mtime":1606953931003,"results":"29","hashOfConfig":"17"},{"size":498,"mtime":1606958174097,"results":"30","hashOfConfig":"17"},{"size":501,"mtime":1606958235716,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10k1gwk",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\App.js",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\index.js",[],["64","65"],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\Teams.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\MyTeams.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Top5.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\router\\Router.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Header.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\RatePicker.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Footer.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\CreateTeam.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Content.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\components\\Card.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\EditTeam.jsx",["66","67"],"import React, { useState, useEffect } from 'react';\r\nimport { Col, Container, Form, FormCheck, FormControl, FormGroup, FormLabel, Row, Toast } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport CardComponent from '../components/Card';\r\nimport ContentComponent from '../components/Content';\r\n\r\nimport { IoClose } from 'react-icons/io5';\r\n\r\nimport './Team.css';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { AiOutlinePlus } from 'react-icons/ai';\r\n\r\nimport './Team.css';\r\n\r\nconst CardHeader = styled.div`\r\n    height: 11vh;\r\n    padding: 20px 30px 20px 30px;\r\n\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst CardBody = styled.div`\r\n    border-top: 1px solid #eee;\r\n    padding: 20px;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n    color: rgb(85,44,138);\r\n    margin: 0;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst TitleBody = styled.h1`\r\n    font-size: 1.33rem;\r\n    font-weight: bold;\r\n    color: #999;\r\n    margin: 0;\r\n\r\n    text-align: center;\r\n`;\r\n\r\nconst Label = styled(FormLabel)` font-weight: 700; `;\r\n\r\nconst Tags = styled.span`\r\n    z-index: 9999999;\r\n    margin: 0.1rem 1%;\r\n    font-weight: 300;\r\n    padding: 5px 10px;\r\n    border-radius: 25px;\r\n    background-color: rgb(197,3,65);\r\n    color: white;\r\n`;\r\n\r\nconst Check = styled(FormCheck)`\r\n    color: #999;\r\n    \r\n    &:checked {\r\n        background-color: pink !important;\r\n    }\r\n`;\r\n\r\nconst Flex = styled.div` display: flex; flex-wrap: wrap; `;\r\n\r\nconst Card = styled.div`\r\n    width: 100%;\r\n    margin-bottom: 2vh;\r\n    padding: 3% 4%;\r\n    background: linear-gradient(to bottom, rgb(253,253,253), rgb(229,229,229));\r\n    border: 2px dashed rgb(224,224,224);\r\n`;\r\n\r\nconst Paragraph = styled.p` margin-bottom: 0.5vh; `;\r\n\r\nconst Span = styled.span`\r\n    font-weight: ${props => props.bold ? 'bold' : '500'};\r\n    color: ${props => props.lilas ? 'rgb(208,58,106)' : ''};\r\n`;\r\n\r\nconst SoccerField = styled.div`\r\n    height: 88vh;\r\n    width: 100%;\r\n    padding: 7%;\r\n    border-radius: 5px;\r\n    background: linear-gradient(to bottom, rgb(153,52,125), rgb(120,44,127));\r\n    overflow: scroll;\r\n\r\n    display: grid;\r\n    grid-template-columns: auto auto auto;\r\n    grid-gap: 50px;\r\n    grid-column-gap: 80px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    transition: 1s;\r\n\r\n    color: rgb(255,255,255);\r\n    background: linear-gradient(to bottom, rgb(153,52,125), rgb(120,44,127));\r\n    box-shadow: 1px 10px 10px rgb(241,229,238);\r\n    font-size: 1.5rem;\r\n    border: 1px solid rgb(197,3,65);\r\n    width: 100%;\r\n    border-radius: 5px;\r\n    margin-top: 2vh;\r\n    padding: 1vh 0;\r\n\r\n    \r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    \r\n    &:hover {\r\n        transition: 1s;\r\n        background: linear-gradient(to bottom, rgb(116, 26, 124), rgb(182, 57, 147));\r\n    }\r\n`;\r\n\r\nconst ToastCard = styled.div`\r\n    position: fixed;\r\n    width: 33vw;\r\n    top: 2vh;\r\n    left: 2vw;\r\n    z-index: 9999999;\r\n`;\r\n\r\nconst CreateTeam = props => {\r\n    const history = useHistory();\r\n\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const [userData, setUserData] = useState({ \r\n        id: props.match.params.id,\r\n        teamName: '', \r\n        url: '', \r\n        description: '', \r\n        teamType: 'Fantasy', // Real || Fantasy\r\n        tags: 'BR,PTW,Attack',\r\n        formation: '' \r\n    });\r\n    const [nameSearch, setNameSearch] = useState('Neymar');\r\n    const [players, setPlayers] = useState([{ player_name: '', nationality: '', age: 0 }]);\r\n    const [playersTeam, setPlayersTeam] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getPlayers();\r\n\r\n        let storageTeams = localStorage.getItem('teams');\r\n        storageTeams = JSON.parse(storageTeams);\r\n\r\n        let team = storageTeams[props.match.params.id - 1];\r\n\r\n        setUserData({ \r\n            ...userData, \r\n            teamName: team.teamName,\r\n            url: team.url, \r\n            description: team.description, \r\n            teamType: team.teamType,\r\n            tags: team.tags,\r\n            formation: team.formation \r\n        });\r\n\r\n        setPlayersTeam(team.playersTeam);\r\n    }, []);\r\n\r\n    const getPlayers = playerName => {\r\n        const options = {\r\n            method: 'GET',\r\n            url: `https://api-football-v1.p.rapidapi.com/v2/players/search/${playerName ? playerName : 'Neymar'}`,\r\n            headers: {\r\n                'x-rapidapi-key': 'a3540c8e73msh126c82d4d79a6b5p1659d6jsne18406bf2d62',\r\n                'x-rapidapi-host': 'api-football-v1.p.rapidapi.com'\r\n            }\r\n        };\r\n\r\n        axios.request(options).then(resp => {\r\n            console.log(resp.data.api.players);\r\n            setPlayers(resp.data.api.players);\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n    const changeTags = e => {\r\n        let clone = userData.tags.trim();\r\n        clone = clone.split(',');\r\n\r\n        // Evitar que seja apertado enter varias vezes\r\n        if (clone[clone.length - 2] === '' && clone[clone.length - 1] === '') {\r\n            clone.pop();\r\n            clone = clone.join();\r\n            setUserData({ ...userData, tags: clone });\r\n        } else {\r\n            setUserData({ ...userData, tags: e.target.value });\r\n        }\r\n    }\r\n    \r\n    const onEnter = event => {\r\n        if (event.which === 13 || event.keyCode === 13) {\r\n            event.preventDefault();\r\n            let clone = userData.tags.trim().split(',');\r\n\r\n            // Evitar que seja apertado enter varias vezes\r\n            if (clone[clone.length - 1] !== '') { \r\n                clone.push('');\r\n            }\r\n            \r\n            clone = clone.join();\r\n            setUserData({ ...userData, tags: clone });\r\n        }\r\n    }\r\n    \r\n    const removeItem = indice => {\r\n        let clone = userData.tags.trim().split(',');\r\n        clone.splice(indice, 1);\r\n        clone = clone.join();\r\n        setUserData({ ...userData, tags: clone });\r\n    }\r\n\r\n    const validateUrl = () => {\r\n        let validation = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\r\n        let regex = new RegExp(validation);\r\n\r\n        if(userData.url.match(regex) === null) {\r\n            setUserData({ ...userData, url: '' });\r\n        }\r\n\r\n        return userData.url.match(regex) === null;\r\n    }\r\n\r\n    const searchPlayer = () => { \r\n        if(nameSearch.length < 4) {\r\n            setShow(true);\r\n        } else {\r\n            getPlayers(nameSearch);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n        const form = event.currentTarget;\r\n\r\n        event.preventDefault();\r\n\r\n        if (form.checkValidity() === false || validateUrl()) {\r\n          event.stopPropagation();\r\n          setValidated(true);\r\n        } else {\r\n            let storageTeams = localStorage.getItem('teams');\r\n            storageTeams = JSON.parse(storageTeams);\r\n\r\n            if(storageTeams || storageTeams !== null) {\r\n                storageTeams[userData.id - 1] = { ...userData, playersTeam };\r\n                let newTeam = JSON.stringify(storageTeams);\r\n                \r\n                localStorage.setItem('teams', newTeam);\r\n                history.push('/team');\r\n            } else {\r\n                let newTeam = []\r\n                newTeam[userData.id - 1] = { ...userData, playersTeam };\r\n                newTeam = JSON.stringify(newTeam); \r\n\r\n                localStorage.setItem('teams', newTeam);\r\n                history.push('/team');\r\n            }\r\n        }\r\n    };\r\n\r\n    const dragstart = event => {\r\n        const dropzones = document.querySelectorAll('.dropzone');\r\n        dropzones.forEach(dropzone => dropzone.classList.add('highlight'));\r\n\r\n        event.target.classList.add('isDragging');\r\n    }\r\n    \r\n    const dragend = event => {\r\n        const dropzones = document.querySelectorAll('.dropzone');\r\n        dropzones.forEach(dropzone => dropzone.classList.remove('highlight'));\r\n\r\n        event.target.classList.remove('isDragging');\r\n    }\r\n\r\n    const overCard = event => {\r\n        event.preventDefault();\r\n\r\n        event.target.classList.add('over');\r\n\r\n        let containsElement = event.target.firstChild\r\n            && event.target.firstChild.firstChild \r\n            && event.target.firstChild.firstChild;\r\n\r\n        if(containsElement && containsElement !== null) {\r\n            event.target.removeChild(event.target.firstChild);\r\n        }\r\n    }\r\n    \r\n    const dropCard = (event, position) => {\r\n        event.preventDefault();\r\n        \r\n        let cardBeingDragged = document.querySelector('.isDragging');\r\n\r\n        let player_name = cardBeingDragged.firstChild.firstChild.firstChild.lastChild.textContent;\r\n        let nationality = cardBeingDragged.firstChild.firstChild.lastChild.lastChild.textContent;\r\n        let age = cardBeingDragged.firstChild.lastChild.children[0].lastChild.textContent;\r\n\r\n        cardBeingDragged = cardBeingDragged.firstChild.firstChild.firstChild.lastChild;\r\n\r\n        let clone = cardBeingDragged.cloneNode(true);\r\n        clone.classList.add('selected');\r\n\r\n        if (event.target.firstChild) {\r\n            event.target.removeChild(event.target.firstChild);\r\n        }\r\n\r\n        event.target.appendChild(clone);\r\n\r\n        let arrayTeam = [ ...playersTeam ];\r\n        arrayTeam[position] = { player_name: String(player_name), nationality, age: Number(age) };\r\n        setPlayersTeam(arrayTeam);\r\n\r\n        event.target.classList.remove('over');\r\n    }\r\n\r\n    return (\r\n        <ContentComponent>\r\n            <CardComponent styles={{ width: '100%', minHeight: '90vh' }}>\r\n                <CardHeader>\r\n                    <Title>Create Your Team</Title>\r\n                </CardHeader>\r\n                <CardBody>\r\n                    <TitleBody>TEAM INFORMATION</TitleBody>\r\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                        <Container style={{ margin: '8vh auto' }}>\r\n                            <Row>\r\n                                <Col md={6} className=\"pl-3 pr-5\">\r\n                                    <FormGroup style={{ marginBottom: '5vh' }}>\r\n                                        <Label>Team Name</Label>\r\n                                        <FormControl \r\n                                            required\r\n                                            type=\"text\" \r\n                                            placeholder=\"Insert team name\" \r\n                                            value={userData.teamName} \r\n                                            onChange={e => setUserData({ ...userData, teamName: e.target.value })} \r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            Please enter a valid team name.\r\n                                        </Form.Control.Feedback>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Description</Label>\r\n                                        <FormControl \r\n                                            as=\"textarea\" \r\n                                            rows={9} \r\n                                            className=\"textArea\" \r\n                                            value={userData.description} \r\n                                            onChange={e => setUserData({ ...userData, description: e.target.value })} \r\n                                        />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={6} className=\"pl-5 pr-3\">\r\n                                    <FormGroup style={{ marginBottom: '5vh' }}>\r\n                                        <Label>Team Website</Label>\r\n                                        <FormControl \r\n                                            type=\"text\" \r\n                                            placeholder=\"http://myteam.com\" \r\n                                            required\r\n                                            onChange={e => setUserData({ ...userData, url: e.target.value })} \r\n                                            value={userData.url} \r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            Please enter a valid URL.\r\n                                        </Form.Control.Feedback>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Team type</Label>\r\n                                        <br/>\r\n                                        <Check \r\n                                            inline \r\n                                            custom \r\n                                            label=\"Real\" \r\n                                            type=\"radio\" \r\n                                            name=\"teamType\" \r\n                                            value=\"Real\" \r\n                                            onChange={e => setUserData({ ...userData, teamType: e.target.value })} \r\n                                            checked={userData.teamType === 'Real'}\r\n                                            id=\"teamType1\"\r\n                                        />\r\n                                        <Check \r\n                                            inline \r\n                                            custom \r\n                                            label=\"Fantasy\" \r\n                                            type=\"radio\" \r\n                                            name=\"teamType\" \r\n                                            value=\"Fantasy\"\r\n                                            onChange={e => setUserData({ ...userData, teamType: e.target.value })} \r\n                                            checked={userData.teamType === 'Fantasy'} \r\n                                            id=\"teamType2\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Tags</Label>\r\n                                        <FormControl as=\"textarea\" className=\"textArea\" onKeyPress={onEnter} \r\n                                            value={userData.tags} onChange={changeTags} spellCheck={false} /> \r\n                                    </FormGroup>\r\n                                    <Flex>\r\n                                        {userData.tags.length > 1 && userData.tags.split(',').map((t, i) => (\r\n                                            <Tags key={i}>\r\n                                                {t} <IoClose color=\"white\" onClick={() => removeItem(i)} />\r\n                                            </Tags>\r\n                                        ))}\r\n                                    </Flex>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                        <TitleBody>CONFIGURE SQUAD</TitleBody>\r\n                        <Container style={{ margin: '8vh auto' }}>\r\n                            <Row>\r\n                                <Col md={6} className=\"pl-4 pr-5 mt-3\">\r\n                                    <Flex style={{ marginBottom: '5vh', alignItems: 'center' }}>\r\n                                        <Label style={{ margin: 0 }}>Formation</Label>\r\n                                        <FormControl \r\n                                            custom\r\n                                            style={{ maxWidth: '30%', margin: '0 10%' }} \r\n                                            as=\"select\" \r\n                                            value={userData.formation}\r\n                                            onChange={e => setUserData({ ...userData, formation: e.target.value })}>\r\n                                                <option value=\"3-2-2-3\">3 - 2 - 2 - 3</option>\r\n                                                <option value=\"3-2-3-1\">3 - 2 - 3 - 1</option>\r\n                                                <option value=\"3-4-3\">3 - 4 - 3</option>\r\n                                                <option value=\"3-5-2\">3 - 5 - 2</option>\r\n                                                <option value=\"4-2-3-1\">4 - 2 - 3 - 1</option>\r\n                                                <option value=\"4-3-1-1\">4 - 3 - 1 - 1</option>\r\n                                                <option value=\"4-3-2\">4 - 3 - 2</option>\r\n                                                <option value=\"4-4-2\">4 - 4 - 2</option>\r\n                                                <option value=\"4-5-1\">4 - 5 - 1</option>\r\n                                                <option value=\"5-4-1\">5 - 4 - 1</option>\r\n                                        </FormControl>\r\n                                    </Flex>\r\n                                    <SoccerField>\r\n                                        {playersTeam.map((p, i) => (\r\n                                            <div key={p} className=\"position dropzone\" \r\n                                                onDrop={e => dropCard(e, i)} onDragOver={overCard}>\r\n                                                    <div className=\"selected\">\r\n                                                        <Span lilas>{p.player_name}</Span>\r\n                                                    </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </SoccerField>\r\n                                    <Button type=\"submit\">Save</Button>\r\n                                </Col>\r\n                                <Col md={6} className=\"pl-5 pr-4\">\r\n                                    <FormGroup className=\"mb-4\">\r\n                                        <Label>Search Players</Label>\r\n                                        <FormControl type=\"text\" onChange={e => setNameSearch(e.target.value)} \r\n                                            placeholder=\"Neymar\" minLength={3} />\r\n                                        <Button type=\"button\" onClick={searchPlayer}>Pesquisar</Button>\r\n                                    </FormGroup>\r\n                                    {players.map((p, i) => (\r\n                                        <Card key={i} draggable={true} onDragStart={dragstart}\r\n                                            className=\"Card\" onDragEnd={dragend}>\r\n                                                <Flex>\r\n                                                    <Col md={10} className=\"p-0 w-100\">\r\n                                                        <Paragraph>\r\n                                                            <Span bold>Name: </Span>\r\n                                                            <Span lilas>{p.player_name}</Span>\r\n                                                        </Paragraph>\r\n                                                        <Paragraph>\r\n                                                            <Span bold>Nationality: </Span>\r\n                                                            <Span lilas>{p.nationality || '[Not Defined]'}</Span>\r\n                                                        </Paragraph>\r\n                                                    </Col>\r\n                                                    <Col className=\"p-0\">\r\n                                                        <Paragraph>\r\n                                                            <Span bold>Age: </Span>\r\n                                                            <Span lilas>{p.age}</Span>\r\n                                                        </Paragraph>\r\n                                                    </Col>\r\n                                                </Flex>\r\n                                        </Card>\r\n                                    ))}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Form>\r\n                </CardBody>\r\n            </CardComponent>\r\n            <ToastCard>\r\n                <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide>\r\n                    <Toast.Header>\r\n                        <strong className=\"mr-auto text-danger\">Warnign</strong>\r\n                    </Toast.Header>\r\n                    <Toast.Body className=\"text-danger\">\r\n                        Oops, you must type 3 characters in minimal to search!\r\n                    </Toast.Body>\r\n                </Toast>\r\n            </ToastCard>\r\n        </ContentComponent>\r\n    );\r\n}\r\n\r\nexport default CreateTeam;","C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\LogIn.jsx",[],"C:\\Users\\Paulo\\Documents\\React_Projects\\squad\\src\\screens\\Register.jsx",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":14,"column":10,"nodeType":"74","messageId":"75","endLine":14,"endColumn":23},{"ruleId":"76","severity":1,"message":"77","line":176,"column":8,"nodeType":"78","endLine":176,"endColumn":10,"suggestions":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'AiOutlinePlus' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'userData'. Either include them or remove the dependency array. You can also do a functional update 'setUserData(u => ...)' if you only need 'userData' in the 'setUserData' call.","ArrayExpression",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [props.match.params.id, userData]",{"range":"85","text":"86"},[4339,4341],"[props.match.params.id, userData]"]